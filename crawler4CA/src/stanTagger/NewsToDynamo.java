package stanTagger;


import java.io.*;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Properties;
import java.util.Scanner;
import java.util.Set;

import javax.net.ssl.HttpsURLConnection;

import org.apache.http.Header;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicHeader;
import org.apache.http.protocol.HTTP;

import edu.stanford.nlp.ling.CoreAnnotations;
import edu.stanford.nlp.ling.Sentence;
import edu.stanford.nlp.ling.TaggedWord;
import edu.stanford.nlp.ling.HasWord;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.neural.rnn.RNNCoreAnnotations;
import edu.stanford.nlp.pipeline.Annotation;
import edu.stanford.nlp.pipeline.StanfordCoreNLP;
import edu.stanford.nlp.process.CoreLabelTokenFactory;
import edu.stanford.nlp.process.DocumentPreprocessor;
import edu.stanford.nlp.process.PTBTokenizer;
import edu.stanford.nlp.process.TokenizerFactory;
import edu.stanford.nlp.sentiment.SentimentCoreAnnotations;
import edu.stanford.nlp.tagger.maxent.MaxentTagger;
import edu.stanford.nlp.trees.Tree;
import edu.stanford.nlp.util.CoreMap;

import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.sun.org.apache.xerces.internal.impl.dv.util.Base64;

/** This demo shows user-provided sentences (i.e., {@code List<HasWord>})
 *  being tagged by the tagger. The sentences are generated by direct use
 *  of the DocumentPreprocessor class.
 *
 *  @author Christopher Manning
 */
class NewsToDynamo {

  private NewsToDynamo() {}
  
 public String newsID = "";
 public String website = "";
 public String title_sentiment = "";
 public String title_text = "";
 public String news_sentiment = "";
 public String news_text = "";
 public String date = "";
 


	public static Set<String> loadDictionary(String fileName) throws IOException {
	    Set<String> words = new HashSet<String>();
	    File file = new File(fileName+".txt");
	    BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file)));
	    Scanner sc = new Scanner(br);
	    while (sc.hasNext()) {
	        words.add(sc.next());
	    }
	    br.close();
	    return words;
	}

  public static void main(String[] args) throws Exception {
//    if (args.length != 2) {
//      System.err.println("usage: java TaggerDemo2 modelFile fileToTag");
//      return;
//    }
	  //object
	  NewsToDynamo obj = new NewsToDynamo();
	  obj.newsID="002";
	  obj.title_sentiment="positive";
	  obj.title_text="Best Solution Corp";
	  obj.website="propertyportalwatch";
	  obj.date = "05-06-2014";
	  //
	 
	long positiveCount = 0;
	long negativeCount = 0;
	Set<String> positive = loadDictionary("positivewordsdictionary");
    Set<String> negative = loadDictionary("negativewordsdictionary");
    List<String> classification = new ArrayList<String>(); 
	int i = 0;
	int j = 0;
	String line = "";
	String stanClassSentiment = "";
	String classified = "";
    
    MaxentTagger tagger = new MaxentTagger("/Users/lelong/Documents/workspace/consolidatedCrawler/crawler4CA/taggers/english-left3words-distsim.tagger");
    TokenizerFactory<CoreLabel> ptbTokenizerFactory = PTBTokenizer.factory(new CoreLabelTokenFactory(),
									   "untokenizable=noneKeep");
    BufferedReader r = new BufferedReader(new InputStreamReader(new FileInputStream("/Users/lelong/Documents/workspace/consolidatedCrawler/crawler4CA/toDB.txt"), "utf-8"));
    PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out, "utf-8"));
    DocumentPreprocessor documentPreprocessor = new DocumentPreprocessor(r);
    documentPreprocessor.setTokenizerFactory(ptbTokenizerFactory);
    for (List<HasWord> sentence : documentPreprocessor) {
    	pw.println("\n\n");
        List<TaggedWord> taggedSent = tagger.tagSentence(sentence);
        for (TaggedWord tw : taggedSent) {
          if (tw.tag().startsWith("JJ")) {
        	  if (positive.contains(tw.word().toLowerCase())) {
  	            	System.out.println("Found positive "+positiveCount+":"+tw.word());
  	            	positiveCount++;
  	        	}
  	        	if (negative.contains(tw.word().toLowerCase())) {
  	        		System.out.println("Found negative "+negativeCount+":"+tw.word());
  	        		negativeCount++;
  	        	}
            pw.println(tw.word());
          }
        }
        
        
        if(positiveCount>negativeCount){
        	classification.add("positive");
        	positiveCount=0;
        	negativeCount=0;
        }
        else if(negativeCount>positiveCount){
        	classification.add("negative");
        	positiveCount=0;
        	negativeCount=0;
        }
        else{
        	classification.add("neutral");
        	positiveCount=0;
        	negativeCount=0;
        }
    }
    pw.println(classification);
    pw.println(positiveCount);
    pw.println(negativeCount);
    
    
    // Stanford Sentiment Analyser:
    BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream("/Users/lelong/Documents/workspace/consolidatedCrawler/crawler4CA/toDB.txt"), "utf-8"));
    while (br.ready()){
    	line = br.readLine();	
    	stanClassSentiment = findSentiment(line); 
    	if(stanClassSentiment.equals("negative")){
    		if(stanClassSentiment.equals(classification.get(j))){
        		//do nothing
        	}
    		else{
    			stanClassSentiment = classification.get(j);
    		}
    	}
    	
    	if(j==0){
    	classified =  line + " -- "+stanClassSentiment +"<br>\n";
    	obj.news_text=line;
    	obj.news_sentiment=stanClassSentiment;
    	}
    	else{
    		classified = classified + line + " -- "+stanClassSentiment +"<br>\n"; 
    	}
    	j++;
    }
    
    File f = new File("/Users/lelong/Documents/workspace/consolidatedCrawler/crawler4CA/sentiment.txt");
	Boolean flag = false;
	if(f.exists()){
		f.delete();
		flag = true;
		System.out.println("flag : "+flag);
	}
	else{
		System.out.println("File not found to delete");
	}
    
    BufferedWriter bw = new BufferedWriter(new FileWriter("/Users/lelong/Documents/workspace/consolidatedCrawler/crawler4CA/sentiment.txt"));
    bw.write(classified);
    bw.close();
    
    /* Object to JSON using jackson parser
     * By Vignesh Prakasam*/
    ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
    String json = ow.writeValueAsString(obj);
    pw.println(json);
    
    
    
    /* Posting a Request */
    //HttpResponse res = postReq(json);
    //AmazonDynamoDBSample.addItem("CA_NEWS");
    //pw.println(res);
    pw.close();
    
    
  }
  
  private static  HttpResponse postReq(String json) throws IOException {
	// TODO Auto-generated method stub

	  HttpClient client = new DefaultHttpClient();
	  HttpResponse response = null;
      try{
          HttpPost post = new HttpPost("http://dynamodb.us-west-2.amazonaws.com");
          
          post.addHeader("host","http://dynamodb.us-west-2.amazonaws.com");
          post.addHeader("x-amz-date", "20130112T092034Z");
          post.addHeader("x-amz-target", "DynamoDB_20120810.PutItem");
          post.addHeader("Authorization", "AWS4-HMAC-SHA256 Credential=AKIAJKPXMZOR4I2GGKZQ/20130112/us-west-2/dynamodb/aws4_request,SignedHeaders=host;x-amz-date;x-amz-target,Signature=145b1567ab3c50d929412f28f52c45dbf1e63ec5c66023d232a539a4afd11fd9");
         // post.addHeader("content-Type", "application/x-amz-json-1.0");
          //post.addHeader("content-Length", "23");
          post.addHeader("connection", "Keep-Alive");
          StringEntity se = new StringEntity(json); 
          se.setContentEncoding(new BasicHeader(HTTP.CONTENT_TYPE, "application/x-amz-json-1.0"));
          post.setEntity(se);
          response = client.execute(post);
      }
      catch(Exception e){
          e.printStackTrace();
         // createDialog("Error", "Cannot Estabilish Connection");
      }
	return response;
	  
	  
//		URL myURL = new URL("www.dynamodb.us-west-2.amazonaws.com");
//		HttpURLConnection myURLConnection = (HttpURLConnection)myURL.openConnection();
//		myURLConnection.setRequestMethod("POST / HTTP/1.1");
//		myURLConnection.setRequestProperty("host", "dynamodb.us-west-2.amazonaws.com");
//		myURLConnection.setRequestProperty("x-amz-date", "20130112T092034Z");
//		myURLConnection.setRequestProperty("x-amz-target", "DynamoDB_20120810.PutItem");
//		myURLConnection.setRequestProperty("Authorization", "AWS4-HMAC-SHA256 Credential=AccessKeyID/20130112/us-west-2/dynamodb/aws4_request,SignedHeaders=host;x-amz-date;x-amz-target,Signature=145b1567ab3c50d929412f28f52c45dbf1e63ec5c66023d232a539a4afd11fd9");
//		myURLConnection.setRequestProperty("content-Type", "application/x-amz-json-1.0");
//		myURLConnection.setRequestProperty("content-Length", "23");
//		myURLConnection.setRequestProperty("connection", "Keep-Alive");
//		myURLConnection.setUseCaches(false);
//		myURLConnection.setDoInput(true);
//		myURLConnection.setDoOutput(true);
//		myURLConnection.setb
		
//		//add reuqest header
//		con.set
//		con.setRequestMethod("POST");
//		con.setRequestProperty("User-Agent", USER_AGENT);
//		con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");
//
//		String urlParameters = "sn=C02G8416DRJM&cn=&locale=&caller=&num=12345";
//
//		// Send post request
//		con.setDoOutput(true);
//		DataOutputStream wr = new DataOutputStream(con.getOutputStream());
//		wr.writeBytes(urlParameters);
//		wr.flush();
//		wr.close();
//
//		int responseCode = con.getResponseCode();
//		System.out.println("\nSending 'POST' request to URL : " + url);
//		System.out.println("Post parameters : " + urlParameters);
//		System.out.println("Response Code : " + responseCode);
//
//		BufferedReader in = new BufferedReader(
//		        new InputStreamReader(con.getInputStream()));
//		String inputLine;
//		StringBuffer response = new StringBuffer();
//
//		while ((inputLine = in.readLine()) != null) {
//			response.append(inputLine);
//		}
//		in.close();
//
//		//print result
//		System.out.println(response.toString());
	
}


  
  public static String findSentiment(String line) {

      Properties props = new Properties();
      props.setProperty("annotators", "tokenize, ssplit, parse, sentiment");
      StanfordCoreNLP pipeline = new StanfordCoreNLP(props);
      int mainSentiment = 0;
      if (line != null && line.length() > 0) {
          int longest = 0;
          Annotation annotation = pipeline.process(line);
          for (CoreMap sentence : annotation.get(CoreAnnotations.SentencesAnnotation.class)) {
              Tree tree = sentence.get(SentimentCoreAnnotations.AnnotatedTree.class);
              int sentiment = RNNCoreAnnotations.getPredictedClass(tree);
              String partText = sentence.toString();
              if (partText.length() > longest) {
                  mainSentiment = sentiment;
                  longest = partText.length();
              }

          }
      }
      if (mainSentiment > 4 || mainSentiment < 0) {
          return null;
      }
      String sentiValue = toCss(mainSentiment);
      return sentiValue;

  }

  private static String toCss(int sentiment) {
      switch (sentiment) {
      case 0:
          return "very negative";
      case 1:
          return "negative";
      case 2:
          return "neutral";
      case 3:
          return "postive";
      case 4:
          return "very positive";
      default:
          return "";
      }
  }
  

}
